import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, flushSync } from 'ripple';

describe('basic', () => {
  let container;

  function render(component) {
    mount(component, { target: container });
  }

  beforeEach(() => {
    container = document.createElement('div');
    document.body.appendChild(container);
  });

  afterEach(() => {
    document.body.removeChild(container);
    container = null;
  });

  it('render static text', () => {
    component Basic() {
      <div>{"Hello World"}</div>
    }

    render(Basic);

    expect(container).toMatchSnapshot();
  });

  it('render static attributes', () => {
    component Basic() {
      <div class="foo" id="bar" style="color: red;">{"Hello World"}</div>
    }

    render(Basic);

    expect(container).toMatchSnapshot();
  });

  it('render semi-dynamic text', () => {
    component Basic() {
      let text = 'Hello World';
      <div>{text}</div>
    }

    render(Basic);

    expect(container).toMatchSnapshot();
  });

  it('render dynamic text', () => {
    component Basic() {
      let $text = 'Hello World';

      <button onClick={() => $text = 'Hello Ripple'}>{"Change Text"}</button>

      <div>{$text}</div>
    }

    render(Basic);

    const button = container.querySelector('button');
    
    button.click();

    flushSync();

    expect(container.querySelector('div').textContent).toEqual('Hello Ripple');
  });
});
