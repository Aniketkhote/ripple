import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, flushSync, track, effect } from 'ripple';
import { value, checked } from 'ripple/bind';

describe('use value()', () => {
	let container;

	function render(component) {
		mount(component, {
			target: container,
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
		container = null;
	});

	it('should update value on input', () => {
		component App() {
			const text = track('');

			effect(() => {
				console.log('text changed', @text);
			});

			<input type="text" {ref value(text)} />
		}
		render(App);
		flushSync();

		const input = container.querySelector('input');
		input.value = 'Hello';
		input.dispatchEvent(new Event('input'));
		flushSync();
		expect(input.value).toBe('Hello');
	});

	it('should update checked on input', () => {
		component App() {
			const value = track(false);

			effect(() => {
				console.log('checked changed', @value);
			});

			<input type="checkbox" {ref checked(value)} />
		}
		render(App);
		flushSync();

		const input = container.querySelector('input');
		input.checked = true;
		input.dispatchEvent(new Event('input'));
		flushSync();
		expect(input.checked).toBe(true);
	});
});
