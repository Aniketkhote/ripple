const adjectives = [
  'pretty',
  'large',
  'big',
  'small',
  'tall',
  'short',
  'long',
  'handsome',
  'plain',
  'quaint',
  'clean',
  'elegant',
  'easy',
  'angry',
  'crazy',
  'helpful',
  'mushy',
  'odd',
  'unsightly',
  'adorable',
  'important',
  'inexpensive',
  'cheap',
  'expensive',
  'fancy'
];
const colours = [
  'red',
  'yellow',
  'blue',
  'green',
  'pink',
  'brown',
  'purple',
  'brown',
  'white',
  'black',
  'orange'
];
const nouns = [
  'table',
  'chair',
  'house',
  'bbq',
  'desk',
  'car',
  'pony',
  'cookie',
  'sandwich',
  'burger',
  'pizza',
  'mouse',
  'keyboard'
];

function _random(max) {
  return Math.round(Math.random() * 1000) % max;
}

export component App() {
  let rowId = 1;
  let $items = [];
  let $selected;

  const add = () => ($items = [...$items, ...buildData(1000)]);
  const clear = () => {
    $items = [];
	}

  const partialUpdate = () => {
    for (let i = 0; i < $items.length; i += 10) {
      const row = $items[i];
      row.$label = row.$label + ' !!!';
    }
  };

  const remove = (row) => {
    const clone = $items.slice();
    clone.splice(clone.indexOf(row), 1);
    $items = clone;
  }
  
  const run = () => {
    $items = buildData(1000);
  };

  const runLots = () => {	
    $items = buildData(10000);
  };
  
  const swapRows = () => {
    if ($items.length > 998) {
      const clone = $items.slice();
      const tmp = clone[1];
      clone[1] = clone[998];
      clone[998] = tmp;
      $items = clone;
    }
  };

  function buildData(count = 1000) {
		const data = new Array(count);
		for (let i = 0; i < count; i++) {
      const label = `${adjectives[_random(adjectives.length)]} ${colours[_random(colours.length)]} ${nouns[_random(nouns.length)]}`;
      
			data[i] = {
        id: rowId++,
        $label: label,
      }
		}
		return data;
	}

  <div id="main" class="container">
    <div class="jumbotron">
      <div class="row">
        <div class="col-md-6">
          <h1>{'Ripple'}</h1>
        </div>
        <div class="col-md-6">
          <div class="row">
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="run" onClick={run}>
                {"Create 1,000 rows"}
              </button>
            </div>
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="runlots" onClick={runLots}>
                {"Create 10,000 rows"}
              </button>
            </div>
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="add" onClick={add}>
                {"Append 1,000 rows"}
              </button>
            </div>
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="update" onClick={partialUpdate}>
                {"Update every 10th row"}
              </button>
            </div>
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="clear" onClick={clear}>
                {"Clear"}
              </button>
            </div>
            <div class="col-sm-6 smallpad">
              <button type="button" class="btn btn-primary btn-block" id="swaprows" onClick={swapRows}>
                {"Swap Rows"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <table class="table table-hover table-striped test-data">
      <tbody>
        for (const row of $items) {
          <tr $class={$selected === row.id ? 'danger' : ''}>
            <td class="col-md-1">{row.id}</td>
            <td class="col-md-4">
              <a onClick={() => { $selected = row.id; }}>{row.$label}</a>
            </td>
            <td class="col-md-1">
              <a onClick={() => remove(row)}>
                <span class="glyphicon glyphicon-remove" aria-hidden="true" />
              </a>
            </td>
            <td class="col-md-6" />
          </tr>
        }
      </tbody>
    </table>
    <span class="preloadicon glyphicon glyphicon-remove" aria-hidden="true"></span>
  </div>
}
